buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.bmuschko:gradle-docker-plugin:3.2.0'
    }
}

group 'si.fri.rsobook'
version '1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'com.bmuschko.docker-remote-api'

sourceCompatibility = 1.8

ext {
    port = "8080"
    dockerImageName = String.format("%s/%s", DOCKER_HUB_USER, project.name)
    dockerImageTag = String.format("%s:%s", dockerImageName, version)
    dockerContainerName = String.format("%s", project.name)
}

repositories {
    mavenCentral()
    maven {
        url 'https://box.kisek.si/nexus/repository/maven-releases' //'http://localhost:8081/repository/maven-releases/'
        credentials {
            username NEXUS_USERNAME
            password NEXUS_PASSWORD
        }
    }
}

dependencies {

    compile group: 'javax', name: 'javaee-api', version: '7.0'

    compile group: "com.kumuluz.ee", name: 'kumuluzee-core', version: '2.4.1'
    compile group: "com.kumuluz.ee", name: 'kumuluzee-servlet-jetty', version: '2.4.1'
    compile group: "com.kumuluz.ee", name: 'kumuluzee-jax-rs-jersey', version: '2.4.1'
    compile group: "com.kumuluz.ee", name: 'kumuluzee-jpa-hibernate', version: '2.4.1'
    compile group: "com.kumuluz.ee", name: 'kumuluzee-cdi-weld', version: '2.4.1'

    compile group: 'org.postgresql', name: 'postgresql', version: '42.1.1'

    compile group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-hibernate4', version: '2.8.8'
    compile group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.12'

    compile group: 'si.fri.rsobook', name: 'core', version: '1.0'

    testCompile group: 'junit', name: 'junit', version: '4.12'
}


/**
 * KUMULUZEE TASKS
 */

task copyCompileDependencies() {
    group 'kumuluzee'
    def dependencyDir = project.buildDir.name + "/kumuluzee/dependency"
    doLast {
        if(!file(dependencyDir).exists()){
            println "Copying all external dependencies."
            copy {
                from configurations.compile
                into dependencyDir
            }
        }
    }
}

task copyCompileClasses(type: Copy) {
    group 'kumuluzee'
    from "src/main/resources"
    from "build/classes/java/main"
    into project.buildDir.name + "/kumuluzee/classes"
}

task buildKumuluzEE {
    group 'kumuluzee'
    dependsOn assemble
    dependsOn copyCompileDependencies
    dependsOn copyCompileClasses
    copyCompileDependencies.mustRunAfter assemble
    copyCompileClasses.mustRunAfter assemble
}

task runKumuluzEE(type: JavaExec) {
    group 'kumuluzee'
    dependsOn buildKumuluzEE
    main = 'com.kumuluz.ee.EeApplication'
    classpath = files(project.buildDir.name + "/kumuluzee/classes") + fileTree(dir: project.buildDir.name + "/kumuluzee/dependency")
    environment('PORT', '7080')
}

/**
 * DOCKER TASKS
 */

import com.bmuschko.gradle.docker.tasks.container.*
import com.bmuschko.gradle.docker.tasks.image.*

docker {
    registryCredentials {
        url = 'https://hub.docker.com/'
        email = DOCKER_HUB_EMAIL
        password = DOCKER_HUB_PASSWORD
        username = DOCKER_HUB_USER
    }
}

task dockerfileCreate(type: Dockerfile) {
    group 'docker'
    destFile = project.file('build/kumuluzee/Dockerfile')
    from 'openjdk:8-jdk'
    maintainer 'Jan Gasperlin "jg1724@student.uni-lj.si"'
    environmentVariable("PORT", port)
    exposePort {
        port
    }
    addFile("classes", "/usr/local/bin/kumuluzee/classes")
    addFile("dependency", "/usr/local/bin/kumuluzee/dependency")
    addFile("run.sh", "/usr/local/bin/kumuluzee")
    defaultCommand('/bin/bash','/usr/local/bin/kumuluzee/run.sh', 'start')
}

task dockerfileCopyScript(type: Copy){
    group 'docker'
    from "run.sh"
    into dockerfileCreate.destFile.parentFile
}

task imageBuild(type: DockerBuildImage) {
    group 'docker'
    dependsOn dockerfileCreate
    dependsOn dockerfileCopyScript
    dependsOn buildKumuluzEE
    inputDir = dockerfileCreate.destFile.parentFile
    tag = dockerImageTag
    //noCache = true
}

task imageRemove(type: DockerRemoveImage) {
    group 'docker'
    imageId dockerImageTag
}

task imagePushToDockerHub(type: DockerPushImage){
    group 'docker'
    imageName = dockerImageTag
    tag = version
}

task containerCreate(type: DockerCreateContainer) {
    group 'docker'
    targetImageId {
        dockerImageTag
    }
    containerName = dockerContainerName
    portBindings = [String.format("%s:%s", port, port)]
}

task containerStart(type: DockerStartContainer) {
    group 'docker'
    targetContainerId {
        dockerContainerName
    }
}

task containerStop(type: DockerStopContainer) {
    group 'docker'
    targetContainerId {
        dockerContainerName
    }
}

task containerRemove(type: DockerRemoveContainer) {
    group 'docker'
    targetContainerId {
        dockerContainerName
    }
}
